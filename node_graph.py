# -*- coding: utf-8 -*-
"""Node Graph.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19bUZ9eJXd7MURhmhl6c7KWt0co5Vreji
"""

from google.colab import drive
drive.mount('/content/drive')

# Import necessary libraries
import pandas as pd
import numpy as np
import networkx as nx
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
import matplotlib.patches as mpatches

# Load the Excel file into a pandas DataFrame
df = pd.read_excel('/content/drive/MyDrive/Colab Notebooks/Work/NOFO Automation/S&T Metrics.xlsx')

# Filter the DataFrame to only include rows where 'FY' (Fiscal Year) is 22
df = df[df['Project FY\n(project funded)'].between(18, 22)]

# Fill NaN values in the 'Funding Mech' column with an empty string
df['Funding Mech'] = df['Funding Mech'].fillna('')

# Further filter the DataFrame to only include rows where 'Funding Mech' contains "NOFO"
df = df[df['Funding Mech'].str.contains("NOFO")]

# Create an empty graph
G = nx.DiGraph()

for i, row in df.iterrows():
    # The main node is the 'PI Institution'
    main_node = row['PI Institution']
    main_node_affiliation = row['PI Affiliation ']

    # Add the main node to the graph
    G.add_node(main_node, affiliation=main_node_affiliation)

    # Loop over the columns representing partnership organizations
    for num in range(1, 11):
        other_node = row[f'Partnership\nOrganization ({num})']
        other_node_affiliation = row[f'Partnership ({num}) Affiliation ']

        # Check if both the nodes and their affiliations are not NaN
        if pd.notna(other_node):
            # Add the other node to the graph
            G.add_node(other_node, affiliation=other_node_affiliation)
            # Add an edge between the main node and the other node
            G.add_edge(main_node, other_node)
    partner_rows = ['NOAA (1)\nPartner Office', 'NOAA (2)\nPartner Office', 'NOAA (3)\nPartner Office', 'NOAA (4)\nPartner Office']
    for entry in partner_rows:
        partner_node = row[entry]
        # Check if both the nodes and their affiliations are not NaN
        if pd.notna(partner_node):
            # Add the other node to the graph
            G.add_node(partner_node, affiliation="Federal - NOAA")
            # Add an edge between the main node and the partner node
            G.add_edge(main_node, partner_node)

# Get a list of all unique affiliations from the graph nodes
unique_affiliations = list(set(nx.get_node_attributes(G, 'affiliation').values()))

print(unique_affiliations)

# Define specific colors
colors = ['#4c9c2e', '#ff8300', '#a224dd', '#0093d0', '#d02c2f', '#0e1d49', '#FFC0CB', '#FFFF00']

# Create a dictionary to map each unique affiliation to a color
color_map = dict(zip(unique_affiliations, colors))

# Compute the positions for the nodes for visualisation
pos = nx.spring_layout(G.to_undirected(), k=1.5, iterations=500)

# Set the size of the plot
plt.figure(figsize=(15, 15), dpi=300)

# Loop over each unique affiliation and color
for affiliation, color in color_map.items():
    # Draw the nodes that correspond to the current affiliation and color
    nx.draw_networkx_nodes(G, pos, nodelist=[node for node, attr in G.nodes(data=True) if attr.get('affiliation') == affiliation], node_color=color, node_size=100, edgecolors='black', linewidths=0.5)

# Draw the edges of the graph
nx.draw_networkx_edges(G, pos)

# Create a legend with colored patches for each affiliation
handles = [mpatches.Patch(color=color, label=affiliation) for affiliation, color in color_map.items()]

# Add the legend to the plot in the upper right corner
plt.legend(handles=handles, loc='upper right')

# Turn off the axis
plt.axis('off')

# Show the plot
plt.show()